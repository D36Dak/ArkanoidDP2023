@page "/game"
@using Arkanoid.Data.PowerUps;
@using Arkanoid.Data.Command;
@using Arkanoid.Data.Tiles;
@using Arkanoid.Data.Tiles.Decorator;
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using Arkanoid.Data
@using System.Numerics;
@using Arkanoid.Data.Strategy;
@using Arkanoid.Data.Logger;
@using Arkanoid.Data.Composite;
@using Arkanoid.Data.State;
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Game</PageTitle>

@if (menuMarkup != null)
{
    @((MarkupString)menuMarkup)
}

<h1>Game view</h1>
<button class="btn btn-primary" disabled="@(!canStart)" @onclick="Start">Start</button>
<button class="btn btn-primary" @onclick="Stop">Stop</button>
<button class="btn btn-primary" @onclick="GE.ResetBallPosition">Reset</button>
<button class="btn btn-primary" @onclick="Subscribe">Join game</button>
<div>
    <button class="btn btn-secondary" @onclick="RegularBall">Regular Ball</button>
    <button class="btn btn-secondary" @onclick="FastBall">Fast Ball</button>
    <button class="btn btn-secondary" @onclick="TeleportingBall">Teleporting Ball</button>
</div>
<h1 class="text-primary">Level select</h1>
<div>
    <button class="btn btn-primary" @onclick="LoadLevel">LEVEL 1</button>
</div>
<div>
    <p>HP: @GE.HP</p>
    <p>Game state: @GE.gameState.GetMessage()</p>
</div>

@* <div style="top: @(top)px; left: @(left)px; position: relative">test</div> *@
<div id="level" @onkeypress="KeyPressEvent"
     style="background-color: #000000; width: @(GE.GetWindowWidth())px; height: @(GE.GetWindowHeight())px; margin: auto; position:relative"
     tabindex="0">
    <div style="color: white; top: @(GE.GetBallY())px; left: @(GE.GetBallX())px; width: 1px; position: relative"><img width="@GE.GetBallSize()" height="@GE.GetBallSize()" src="https://static.vecteezy.com/system/resources/previews/016/314/339/original/red-circle-red-dot-icon-free-png.png" /></div>
    <div style="width:@(P1.GetWidth())px;height:20px;border:1px solid red;background-color:@P1.color; top:@(GE.GetWindowHeight()-60)px; left:@(P1.GetX())px; position:absolute; display:inline-block"></div>
    <div style="width:@(P2.GetWidth())px;height:20px;border:1px solid red;background-color:@P2.color; top:@(GE.GetWindowHeight()-60)px; left:@(P2.GetX())px; position:absolute; display:inline-block"></div>
    @if (GE.tm is not null)
    {
        @foreach (var tile in GE.tm.tiles.ToList())
        {
            <div style="background: @(tile.Color); width: @(tile.Width)px; height: @(tile.Height)px; position: absolute; top: @(tile.Position.Y)px; left: @(tile.Position.X)px;"></div>
        }
        @if (GE.visiblePowerUps is not null)
        {
            @foreach (var pu in GE.visiblePowerUps)
            {
                <div style="background: @(pu.Color); width: @(pu.Size)px; height: @(pu.Size)px; position: absolute; top: @(pu.Y)px; left: @(pu.X)px;"></div>
            }
        }
    }
</div>
<button @onclick="TEST">TEST</button>
<div class="form-group">
    <label>
        User:
        <input @bind="me.name" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="SendChatMessage" disabled="@(!ChatConnected)">Send</button>

<hr>
@if(me is not null)
{
    <ul id="messagesList">
        @foreach (var message in me.messages)
        {
            <li>@message</li>
        }
    </ul>
}

<br />

@code {
    private User me = null;
    private GameEngine? GE = null;//GameEngine.GetInstance(navigation);
    private HubConnection? hubConnection;
    private Paddle P1;
    private Paddle P2;
    private Paddle? myPlayer;
    PaddleController controller = new PaddleController();
    bool canStart = true;
    public MarkupString? menuMarkup = null;
    //---------------Chat---------------
    private HubConnection? chathubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    //----------------------------------


    public void TEST()
    {
        GE.tm.DestroyTile(GE.tm.tiles[0]);

    }

    private void CreateMenu()
    {

        List<MenuComponent> menuItems = new()
        {
            new MenuComposite(
                new()
                {
                    new MenuItem("Start", "GE.StartTimer"),
                    new MenuItem("Stop"),
                    new MenuItem("Reset"),
                    new MenuItem("Join Game")
                },
                "Game management"),
            new MenuComposite(
                new()
                {
                    new MenuItem("Regular Ball"),
                    new MenuItem("Fast Ball"),
                    new MenuItem("Teleporting Ball")
                },
                "Ball strategies"
            )
        };

        MenuComposite mcomp = new MenuComposite(menuItems, "Menu composite");
        menuMarkup = new MarkupString(mcomp.GetHTML());
    }

    protected override async Task OnInitializedAsync()
    {
        me = new Spectator("");
        GE = GameEngine.GetInstance();
        LoggerSingleton.GetInstance().Log("This is printing information", LogLevel.INFO);
        LoggerSingleton.GetInstance().Log("This is a warning", LogLevel.WARN);
        LoggerSingleton.GetInstance().Log("This is an error", LogLevel.ERROR);

        CreateMenu();

        chathubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/chatHub"))
        .Build();

        P1 = GE.P1;
        P2 = GE.P2;
        TileFactory tf = new();

        Vector2 offset = new Vector2(40, 20);
        Vector2 gap = new Vector2(20, 20);
        int width = 100;
        int height = 50;
        //PaddleController controller = new PaddleController();
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
        .Build();
        if (GE.tm is null)
        {
            TileManager tm = new TileManager();
            for (var i = 0; i < 3; i++)
            {
                var pos = new Vector2(offset.X, offset.Y + i * (height + gap.Y));
                Component tile = tf.CreateTile(TileType.Regular, pos);
                for (var j = 1; j < 10; j++)
                {
                    // Shallow  copy
                    Component clonedTile = tile.Clone();
                    clonedTile.Position = new Vector2(offset.X + j * (width + gap.X), offset.Y + i * (height + gap.Y));
                    tm.tiles.Add(clonedTile);

                    //Deep copy
                    // Component deepClonedTile = tile.DeepCopy();
                    // deepClonedTile.Position = new Vector2(offset.X + j * (width + gap.X), offset.Y + i * (height + gap.Y));
                    // tm.tiles.Add(deepClonedTile);
                }
                tm.tiles.Add(tile);
            }
            GE.tm = tm;
            GE.LoadLevel(1);
        }

        GE.ConnectToHub(Navigation);
        hubConnection.On<int, int, string>("ReceivePosition", (x, y, tag) =>
        {
            if (tag == "ball")
            {
                //GE.SetBallPosition(x, y);
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int, Side>("ReceivePlayerPosition", (x, side) =>
        {
            Paddle p = P1;
            if (p.side != side)
            {
                p = P2;
            }

            p.SetX(x);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, Side>("PlayerJoin", (id, side) =>
        {
            Console.WriteLine($"Joined {id} {side}");


            // change player color to indicate that joined. later...
            if (id.Equals(hubConnection.ConnectionId))
            {
                Paddle p;
                if (side == Side.RIGHT)
                {
                    p = P2;
                }
                else
                {
                    p = P1;
                }
                Console.WriteLine("Set player id to " + id);
                // my player should only be on singleton probably
                p.id = id;
                myPlayer = p;
                myPlayer.color = "olive";
                Console.WriteLine($"PaddleID {myPlayer.side}");
                me = new Player(id, side);
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, Side>("PlayerLeft", (id, side) =>
        {
            Paddle p;
            if (side == Side.RIGHT)
            {
                p = P2;
            }
            else
            {
                p = P1;
            }
            // change color to indicate that player left

        });

        chathubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            //var encodedMsg = $"{user}: {message}";
            //messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });
        await chathubConnection.StartAsync();
        await hubConnection.StartAsync();
    }

    private async Task KeyPressEvent(KeyboardEventArgs args)
    {   
        if (myPlayer == null) return;

        ICommand command = null;

        switch (args.Key)
        {
            case "a":
                //myPlayer.MoveRight();
                //command = new LeftCommand(myPlayer);
                command = new LeftMoveProxy(myPlayer);
                //await SendPaddlePosition(myPlayer);
                break;
            case "d":
                //myPlayer.MoveLeft();
                //command = new RightCommand(myPlayer);
                command = new RightMoveProxy(myPlayer);
                //await SendPaddlePosition(myPlayer);
                break;
            case "x":
                controller.Undo();
                await SendPaddlePosition(myPlayer);
                return;
            case "w":
                if (GE is not null)
                {
                    GE.SetState(new RunningState());
                }
                break;
            default:
                Console.WriteLine("Wrong key try a or d");
                break;

        }

        if(command != null)
        {
            controller.SetCommand(command);
            controller.Invoke();
            await SendPaddlePosition(myPlayer);
        }
    }

    private async Task SendPaddlePosition(Paddle p)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SetPlayerPosition", p.GetX(), p.side);
        }
    }
    private async Task Subscribe()
    {
        if (hubConnection is not null)
        {
            string? id = hubConnection.ConnectionId;
            if (id != null)
                await hubConnection.SendAsync("Subscribe", id);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
        if (chathubConnection is not null)
        {
            await chathubConnection.DisposeAsync();
        }
    }
    private void RegularBall()
    {
        if (GE is not null)
        {
            GE.SetBallMovementStrategy(StrategyFactory.GetStrategy(Strategies.Regular));
        }
    }
    private void FastBall()
    {
        if (GE is not null)
        {
            GE.SetBallMovementStrategy(StrategyFactory.GetStrategy(Strategies.Fast));
        }
    }
    private void TeleportingBall()
    {
        if (GE is not null)
        {
            GE.SetBallMovementStrategy(StrategyFactory.GetStrategy(Strategies.Teleport));
        }
    }
    private void LoadLevel()
    {
        GE.LoadLevel(1);
    }
    private void Stop()
    {
        GE.SetState(new PausedState());
    }
    private void Start()
    {
        GE.SetState(new RunningState());
    }
    //----------------------------------------
    private async Task SendChatMessage()
    {
        if (userInput is not null && !userInput.Equals(""))
        {
            me.name = userInput;
        }
        me.SendMessage($"{me.name}: {messageInput}");
        if (chathubConnection is not null)
        {
            await chathubConnection.SendAsync("SendMessage", userInput, messageInput);
            messageInput = "";
        }
    }
    public bool ChatConnected =>
        chathubConnection?.State == HubConnectionState.Connected;
}