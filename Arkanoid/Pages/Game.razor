@page "/game"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Timers
@using Arkanoid.Data
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Game</PageTitle>

<h1>Game view</h1>
    <button class="btn btn-primary" disabled="@(!canStart)" @onclick="GE.StartTimer">Start</button>
    <button class="btn btn-primary" @onclick="GE.StopTimer">Stop</button>
    <button class="btn btn-primary" @onclick="GE.ResetBallPosition">Reset</button>
    <button class="btn btn-primary" @onclick="Subscribe">Join game</button>

    @* <div style="top: @(top)px; left: @(left)px; position: relative">test</div> *@
    <div id="level" @onkeypress="KeyPressEvent"
         style="background-color: #000000; width: @(GE.GetWindowWidth())px; height: @(GE.GetWindowHeight())px; margin: auto; position:relative"
         tabindex="0">
        <div style="color: white; top: @(GE.GetBallY())px; left: @(GE.GetBallX())px; width: 1px; position: relative"><img width="@GE.GetBallSize()" height="@GE.GetBallSize()" src="https://static.vecteezy.com/system/resources/previews/016/314/339/original/red-circle-red-dot-icon-free-png.png" /></div>
        <div style="width:@(P1.GetWidth())px;height:20px;border:1px solid red;background-color:@P1.color; top:@(GE.GetWindowHeight()-60)px; left:@(P1.GetX())px; position:absolute; display:inline-block"></div>
        <div style="width:@(P2.GetWidth())px;height:20px;border:1px solid red;background-color:@P2.color; top:@(GE.GetWindowHeight()-60)px; left:@(P2.GetX())px; position:absolute; display:inline-block"></div>
    @if (GE is not null)
    {
        @foreach (var tile in GE.Tiles)
        {
            <div style="background: @(tile.Color); width: @(tile.Width)px; height: @(tile.Height)px; position: absolute; top: @(tile.Position.Y)px; left: @(tile.Position.X)px;"></div>
        }
    }
    </div>

<h4>@KeyPressed </h4>
<br />

@code {
    private GameEngine? GE = null;//GameEngine.GetInstance(navigation);
    private HubConnection? hubConnection;
    private Paddle P1;
    private Paddle P2;
    private Paddle? myPlayer;
    bool canStart = true;
    string KeyPressed = "aaa";

    protected override async Task OnInitializedAsync()
    {
        GE = GameEngine.GetInstance(Navigation);
        P1 = GE.P1;
        P2 = GE.P2;

        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
        .Build();

        hubConnection.On<int, int, string>("ReceivePosition", (x, y, tag) =>
        {
            if (tag == "ball")
            {
                GE.SetBallPosition(x, y);
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<int, Side>("ReceivePlayerPosition", (x, side) =>
        {
            Paddle p = P1;
            if (p.side != side)
            {
                p = P2;
            }

            p.SetX(x);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, Side>("PlayerJoin", (id, side) =>
        {
            Console.WriteLine($"Joined {id} {hubConnection.ConnectionId} {side}");
            Paddle p;
            if(side == Side.RIGHT)
            {
                p = P2;
            } else
            {
                p = P1;
            }
            p.id = id;

            // change player color to indicate that joined. later...
            if (id.Equals(hubConnection.ConnectionId))
            {
                myPlayer = p;
                myPlayer.color = "olive";
                Console.WriteLine($"PaddleID {myPlayer.side}");
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, Side>("PlayerLeft", (id, side) =>
        {
            Paddle p;
            if (side == Side.RIGHT)
            {
                p = P2;
            }
            else
            {
                p = P1;
            }
            // change color to indicate that player left

        });

        await hubConnection.StartAsync();
    }
    private async Task KeyPressEvent(KeyboardEventArgs args)
    {
        if (myPlayer == null) return;
        switch(args.Key){
            case "a":
                myPlayer.MoveRight();
                await SendPaddlePosition(myPlayer);
                break;
            case "d":
                myPlayer.MoveLeft();
                await SendPaddlePosition(myPlayer);
                break;
            default:
                Console.WriteLine("Wrong key try a or d");
                break;

        }
    }

    private async Task SendPaddlePosition(Paddle p)
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SetPlayerPosition", p.GetX(), p.side);
        }
    }
    private async Task Subscribe()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Subscribe", hubConnection.ConnectionId);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    //----------------------------------------
}
